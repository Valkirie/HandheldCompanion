name: Build and Publish Handheld Companion

on:
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build (Release)
    runs-on: windows-latest 

    env:
      Solution_Name: ControllerService.sln
      INNO_VERSION: 6.2.1

    steps:
    
    # Checkout project
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Innosetup
      shell: pwsh
      run: |
        choco install innosetup --version=${{ env.INNO_VERSION }}
    
    # Setup NuGet and run Restore
    - name: NuGet Restore
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'
    - run: nuget restore ControllerService.sln

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Build ControllerService solution
    - name: Build Entire Solution
      run: msbuild $env:Solution_Name /p:Configuration=Release
      
    # Rebuild ControllerService project
    - name: Rebuild ControllerService Project
      run: msbuild $env:Solution_Name /t:ControllerService:rebuild /p:Configuration="Release"

    - name: Set release version number
      if: ${{ GITHUB_REF_TYPE == 'tag' }}
      uses: jacobtomlinson/gha-find-replace@v3
      with:
        find: "#define MyAppVersion '\\d+(?:\\.\\d+)+'"
        replace: "#define MyAppVersion '${{ vars.GITHUB_REF_NAME }}'"
        include: "*.iss"
        regex: true
      
    # Create Installers
    - name: Create Installer
      run: |
          "iscc.exe ControllerService.iss"
      shell: pwsh
      
    - name: Create Offline Installer
      run: |
          "iscc.exe ControllerService-offline.iss"
      shell: pwsh
    
    # Upload install file artifacts
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: install-files
        path: ./install

  release:
    if: ${{ GITHUB_REF_TYPE == 'tag' }}
    name: Release
    runs-on: windows-latest 
    needs: build

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: install-files
        path: ./install
    # Create release only when new tag is pushed
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ vars.GITHUB_REF_NAME }}
        release_name: 'Build'
        draft: true
        prerelease: false        

    - name: Upload Assets to release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./install/HandheldCompanion-${{ vars.GITHUB_REF_NAME }}.exe
        asset_name: ./install/HandheldCompanion-${{ vars.GITHUB_REF_NAME }}.exe
        asset_content_type: application/octet-stream

    - name: Publish Release
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}