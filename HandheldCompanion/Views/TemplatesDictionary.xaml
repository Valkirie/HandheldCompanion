<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:chelper="clr-namespace:iNKORE.UI.WPF.Modern.Controls.Helpers;assembly=iNKORE.UI.WPF.Modern"
    xmlns:cmdHC="clr-namespace:HandheldCompanion.Commands.Functions.HC"
    xmlns:cmdWIN="clr-namespace:HandheldCompanion.Commands.Functions.Windows"
    xmlns:converters="clr-namespace:HandheldCompanion.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:effects="clr-namespace:Microsoft.Expression.Media.Effects;assembly=Microsoft.Expression.Effects"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:ikw="http://schemas.inkore.net/lib/ui/wpf"
    xmlns:l="clr-namespace:HandheldCompanion.Localization"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:resx="clr-namespace:HandheldCompanion.Properties"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:ui="http://schemas.inkore.net/lib/ui/wpf/modern"
    xmlns:viewmodels="clr-namespace:HandheldCompanion.ViewModels"
    mc:Ignorable="d">

    <converters:InverseAppThemeConverter x:Key="InverseAppThemeConverter" />
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />
    <converters:DrawingImageToImageSourceConverter x:Key="DrawingImageToImageSourceConverter" />
    <converters:IndexToVisibilityConverter x:Key="IndexToVisibilityConverter" />
    <converters:IsEnabledConverter x:Key="IsEnabledConverter" />
    <converters:PercentageConverter x:Key="PercentageConverter" />
    <converters:InvertBooleanConverter x:Key="InvertBooleanConverter" />
    <converters:InvertPercentageConverter x:Key="InvertPercentageConverter" />
    <converters:IsNullConverter x:Key="IsNullConverter" />
    <converters:ResourceFormatConverter x:Key="ResourceFormatConverter" />
    <converters:TypeToVisibilityConverter x:Key="TypeToVisibilityConverter" />

    <DataTemplate x:Key="HotkeyTemplate" DataType="{x:Type viewmodels:HotkeyViewModel}">
        <DataTemplate.Resources>
            <sys:Double x:Key="SettingsCardWrapThreshold">580</sys:Double>
        </DataTemplate.Resources>

        <ui:SettingsExpander
            Name="HotkeyDefinition"
            Description="{Binding Description, Mode=OneWay}"
            Header="{Binding Name, Mode=OneWay}">

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="9*" MinWidth="240" />
                    <ColumnDefinition MinWidth="86" />
                </Grid.ColumnDefinitions>

                <ToggleButton
                    Height="40"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Command="{Binding DefineButtonCommand}"
                    IsChecked="{Binding IsListening, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">

                    <ToggleButton.Resources>
                        <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="ToggleButton">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsExecuted}" Value="True">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                    AutoReverse="True"
                                                    RepeatBehavior="1x"
                                                    Storyboard.TargetProperty="Opacity"
                                                    From="1.0"
                                                    To="0.0"
                                                    Duration="0:0:0.125" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Resources>

                    <ikw:SimpleStackPanel Orientation="Horizontal" Spacing="3">
                        <ItemsControl ItemsSource="{Binding ButtonGlyphs}">
                            <ItemsControl.Style>
                                <Style TargetType="ItemsControl">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ButtonGlyphs.Count}" Value="0">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ButtonGlyphs.Count}">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.Style>

                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <ikw:SimpleStackPanel Orientation="Horizontal" Spacing="3" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>

                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ui:FontIcon
                                        FontFamily="PromptFont"
                                        FontSize="24"
                                        Glyph="{Binding Glyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                        <ui:FontIcon.Style>
                                            <Style TargetType="ui:FontIcon">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Foreground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                                        <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseMediumBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                                <Setter Property="Foreground" Value="{Binding Foreground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Style>
                                        </ui:FontIcon.Style>
                                    </ui:FontIcon>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>

                        <TextBlock VerticalAlignment="Center" Text="{Binding KeyboardChord, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding KeyboardChord}" Value="">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding KeyboardChord}">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <TextBlock
                            VerticalAlignment="Center"
                            Style="{StaticResource CaptionTextBlockStyle}"
                            Text="{Binding InputsChordType, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                    </ikw:SimpleStackPanel>
                </ToggleButton>

                <ikw:SimpleStackPanel
                    Grid.Column="1"
                    Margin="3,0,0,0"
                    HorizontalAlignment="Right"
                    Orientation="Horizontal"
                    Spacing="3">
                    <Button VerticalAlignment="Stretch" Command="{Binding EraseButtonCommand}">
                        <ui:FontIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontFamily="{DynamicResource SymbolThemeFontFamily}"
                            Glyph="&#xe75c;" />
                    </Button>

                    <ToggleButton
                        VerticalAlignment="Stretch"
                        Command="{Binding PinButtonCommand}"
                        IsChecked="{Binding IsPinned, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        IsEnabled="{Binding CanUnpin, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                        <ui:FontIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontFamily="{DynamicResource SymbolThemeFontFamily}">
                            <ui:FontIcon.Style>
                                <Style TargetType="{x:Type ui:FontIcon}">
                                    <Setter Property="Glyph" Value="&#xe718;" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsPinned}" Value="True">
                                            <Setter Property="Glyph" Value="&#xe77a;" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ui:FontIcon.Style>
                        </ui:FontIcon>
                    </ToggleButton>
                </ikw:SimpleStackPanel>
            </Grid>

            <ui:SettingsExpander.HeaderIcon>
                <ui:FontIcon
                    Width="16"
                    FontFamily="{Binding FontFamily, Mode=OneWay}"
                    Glyph="{Binding Glyph, Mode=OneWay}" />
            </ui:SettingsExpander.HeaderIcon>

            <ui:SettingsExpander.Items>
                <!--  ICommand selector  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_CommandTypeDesc}"
                    Header="{l:Static resx:Resources.Hotkey_CommandType}"
                    IsEnabled="{Binding CanUnpin, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox SelectedIndex="{Binding CommandTypeIndex, Mode=TwoWay}">
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_None}" ToolTip="{l:Static resx:Resources.Hotkey_NoneDesc}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_Function}" ToolTip="{l:Static resx:Resources.Hotkey_FunctionDesc}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_Keystrokes}" ToolTip="{l:Static resx:Resources.Hotkey_KeystrokesDesc}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_Executable}" ToolTip="{l:Static resx:Resources.Hotkey_ExecutableDesc}" />
                    </ComboBox>
                </ui:SettingsCard>

                <!--  Custom name (only if CanCustom)  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_CommandNameDesc}"
                    Header="{l:Static resx:Resources.Hotkey_CommandName}"
                    Visibility="{Binding CanCustom, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <TextBox Width="290" Text="{Binding CustomName, Mode=TwoWay}" />
                </ui:SettingsCard>

                <!--  Function pick (only if CommandTypeIndex == 1)  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_FunctionToRunDesc}"
                    Header="{l:Static resx:Resources.Hotkey_FunctionToRun}"
                    IsEnabled="{Binding CanUnpin, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                    Visibility="{Binding CommandTypeIndex, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1}">
                    <ComboBox
                        Width="290"
                        ItemsSource="{Binding FunctionCollectionView}"
                        SelectedIndex="{Binding FunctionIndex, Mode=TwoWay}">
                        <ComboBox.Resources>
                            <converters:SeparatorConverter x:Key="SeparatorConverter" />
                        </ComboBox.Resources>
                        <ComboBox.GroupStyle>
                            <GroupStyle>
                                <GroupStyle.HeaderTemplate>
                                    <DataTemplate>
                                        <TextBlock Style="{StaticResource BaseTextBlockStyle}" Text="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                    </DataTemplate>
                                </GroupStyle.HeaderTemplate>
                            </GroupStyle>
                        </ComboBox.GroupStyle>
                        <ComboBox.ItemContainerStyle>
                            <Style BasedOn="{StaticResource {x:Type ComboBoxItem}}" TargetType="ComboBoxItem">
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                            </Style>
                        </ComboBox.ItemContainerStyle>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <ContentPresenter>
                                    <ContentPresenter.Content>
                                        <MultiBinding Converter="{StaticResource SeparatorConverter}">
                                            <Binding Path="Text" />
                                            <Binding Path="IsEnabled" />
                                        </MultiBinding>
                                    </ContentPresenter.Content>
                                </ContentPresenter>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </ui:SettingsCard>

                <!--  QuickToolsCommands  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_QuickToolsPageDesc}"
                    Header="{l:Static resx:Resources.Hotkey_QuickToolsPage}"
                    Visibility="{Binding Command, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type cmdHC:QuickToolsCommands}}">
                    <ComboBox SelectedIndex="{Binding WindowPageIndex, Mode=TwoWay}">
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_Current}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.QuickHomePage_Title}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.QuickDevicePage_Title}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.QuickProfilesPage_Title}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.QuickApplicationsPage_Title}" />
                    </ComboBox>
                </ui:SettingsCard>

                <!--  MainWindowCommands  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_MainWindowPageDesc}"
                    Header="{l:Static resx:Resources.Hotkey_MainWindowPage}"
                    Visibility="{Binding Command, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type cmdHC:MainWindowCommands}}">
                    <ComboBox SelectedIndex="{Binding WindowPageIndex, Mode=TwoWay}">
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_Current}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navController}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navLibrary}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navDevice}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navPerformance}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navProfiles}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navOverlay}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navHotkeys}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navAbout}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_navNotifications}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.MainWindow_Settings}" />
                    </ComboBox>
                </ui:SettingsCard>

                <!--  OnScreenKeyboardLegacyCommands  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_KeyboardLegacyPositionDesc}"
                    Header="{l:Static resx:Resources.Hotkey_KeyboardLegacyPosition}"
                    Visibility="{Binding Command, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type cmdWIN:OnScreenKeyboardLegacyCommands}}">
                    <ComboBox SelectedIndex="{Binding OnScreenKeyboardLegacyPosition, Mode=TwoWay}">
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_KeyboardLegacyPositionBottom}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_KeyboardLegacyPositionMaximize}" />
                    </ComboBox>
                </ui:SettingsCard>

                <!--  CycleSubProfileCommands  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_CycleSubProfileDirectionDesc}"
                    Header="{l:Static resx:Resources.Hotkey_CycleSubProfileDirection}"
                    Visibility="{Binding Command, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type cmdHC:CycleSubProfileCommands}}">
                    <ComboBox SelectedIndex="{Binding CyclingDirection, Mode=TwoWay}">
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_CycleSubProfilePrev}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_CycleSubProfileNext}" />
                    </ComboBox>
                </ui:SettingsCard>

                <!--  ButtonCommands  -->
                <ui:SettingsCard Header="Gamepad button" Visibility="{Binding Command, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type cmdHC:ButtonCommands}}">
                    <ComboBox
                        DisplayMemberPath="Content"
                        ItemsSource="{Binding ButtonCommandsValues, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding ButtonCommandsButton, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </ui:SettingsCard>

                <!--  ButtonCommands  -->
                <ui:SettingsCard Header="Release interval" Visibility="{Binding Command, Converter={StaticResource TypeToVisibilityConverter}, ConverterParameter={x:Type cmdHC:ButtonCommands}}">

                    <DockPanel>
                        <TextBlock
                            Width="35"
                            VerticalAlignment="Center"
                            Text="{Binding ButtonCommandsDelay, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat=N1}"
                            TextAlignment="Center" />
                        <Slider
                            Margin="6,0,0,0"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="1000"
                            Minimum="100"
                            TickFrequency="50"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding ButtonCommandsDelay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Keystrokes (CommandTypeIndex == 2)  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_OutputDesc}"
                    Header="{l:Static resx:Resources.Hotkey_Output}"
                    Visibility="{Binding CommandTypeIndex, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                    <StackPanel Orientation="Horizontal">
                        <ToggleButton
                            Width="247"
                            Height="31"
                            Command="{Binding DefineOutputCommand}"
                            IsChecked="{Binding IsListeningOutput, Mode=OneWay}">
                            <TextBlock
                                VerticalAlignment="Center"
                                Style="{StaticResource CaptionTextBlockStyle}"
                                Text="{Binding KeyboardOutputChord}" />
                        </ToggleButton>

                        <Button
                            Margin="3,0,0,0"
                            VerticalAlignment="Stretch"
                            Command="{Binding EraseOutputButtonCommand}">
                            <ui:FontIcon FontFamily="{DynamicResource SymbolThemeFontFamily}" Glyph="&#xE75C;" />
                        </Button>
                    </StackPanel>
                </ui:SettingsCard>

                <!--  Executable (CommandTypeIndex == 3)  -->
                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_ExecutableTargetDesc}"
                    Header="{l:Static resx:Resources.Hotkey_ExecutableTarget}"
                    Visibility="{Binding CommandTypeIndex, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=3}">
                    <TextBox
                        Width="290"
                        ui:ControlHelper.PlaceholderText="{l:Static resx:Resources.Hotkey_ExecutableTargetPlaceholder}"
                        IsReadOnly="True"
                        Text="{Binding ExecutablePath, Mode=OneWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding TextBoxClickCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                </ui:SettingsCard>

                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_ExecutableArgumentsDesc}"
                    Header="{l:Static resx:Resources.Hotkey_ExecutableArguments}"
                    Visibility="{Binding CommandTypeIndex, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=3}">
                    <TextBox Width="290" Text="{Binding ExecutableArguments, Mode=TwoWay}" />
                </ui:SettingsCard>

                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_WindowStyleDesc}"
                    Header="{l:Static resx:Resources.Hotkey_WindowStyle}"
                    Visibility="{Binding CommandTypeIndex, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=3}">
                    <ComboBox SelectedIndex="{Binding ExecutableWindowStyle, Mode=TwoWay}">
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_WindowStyle_Normal}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_WindowStyle_Hidden}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_WindowStyle_Minimized}" />
                        <ComboBoxItem Content="{l:Static resx:Resources.Hotkey_WindowStyle_Maximized}" />
                    </ComboBox>
                </ui:SettingsCard>

                <ui:SettingsCard
                    Description="{l:Static resx:Resources.Hotkey_RunAsAdministratorDesc}"
                    Header="{l:Static resx:Resources.Hotkey_RunAsAdministrator}"
                    Visibility="{Binding CommandTypeIndex, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=3}">
                    <ui:ToggleSwitch HorizontalAlignment="Right" IsOn="{Binding ExecutableRunAs, Mode=TwoWay}" />
                </ui:SettingsCard>

                <!--  finally: Delete hotkey  -->
                <ui:SettingsCard>
                    <Button
                        HorizontalAlignment="Stretch"
                        Command="{Binding DeleteHotkeyCommand}"
                        Content="{l:Static resx:Resources.Hotkey_Delete}"
                        IsEnabled="{Binding CanUnpin, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource AccentButtonStyle}" />
                </ui:SettingsCard>

            </ui:SettingsExpander.Items>
        </ui:SettingsExpander>
    </DataTemplate>

    <DataTemplate x:Key="LibraryTemplate" DataType="{x:Type viewmodels:ProfileViewModel}">
        <Button
            x:Name="ImageContainer"
            Padding="0"
            BorderThickness="0"
            CacheMode="BitmapCache"
            Command="{Binding Navigate}"
            IsEnabled="{Binding IsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource InverseBooleanToVisibilityConverter}}"
            Tag="{Binding}">

            <Button.Style>
                <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.20" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>

            <Button.Template>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="Root"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource ControlCornerRadius}"
                        SnapsToDevicePixels="True">
                        <Grid x:Name="RootGrid">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="60" />
                            </Grid.RowDefinitions>

                            <ui:ProgressRing
                                Grid.Row="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Panel.ZIndex="999"
                                IsIndeterminate="True"
                                Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}" />

                            <Border Grid.Row="0" ClipToBounds="True">
                                <Image
                                    x:Name="MainImage"
                                    RenderTransformOrigin="0.5,0.5"
                                    Source="{Binding Cover}"
                                    Stretch="UniformToFill">
                                    <Image.RenderTransform>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                    </Image.RenderTransform>
                                    <Image.Effect>
                                        <effects:BloomEffect BloomIntensity="0" BloomSaturation="0.2" />
                                    </Image.Effect>
                                </Image>
                            </Border>

                            <Grid Grid.Row="1" Margin="12">
                                <StackPanel>
                                    <TextBlock
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Center"
                                        Style="{StaticResource BaseTextBlockStyle}"
                                        Text="{Binding Name}"
                                        TextWrapping="NoWrap" />
                                    <TextBlock
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Center"
                                        Style="{StaticResource BodyTextBlockStyle}"
                                        Text="{Binding Description}"
                                        TextWrapping="Wrap" />
                                </StackPanel>
                            </Grid>

                            <Image
                                Width="32"
                                Height="32"
                                Margin="4"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                Source="{Binding Platform, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DrawingImageToImageSourceConverter}}"
                                Stretch="Uniform" />
                        </Grid>

                        <!--  Visual states MUST live on the template root  -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                            To="1.0"
                                            Duration="0:0:0.1" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                            To="1.0"
                                            Duration="0:0:0.1" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.Effect).(effects:BloomEffect.BloomIntensity)"
                                            To="0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                            To="1.05"
                                            Duration="0:0:0.1" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                            To="1.05"
                                            Duration="0:0:0.1" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.Effect).(effects:BloomEffect.BloomIntensity)"
                                            To="0.4"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                            To="1.05"
                                            Duration="0:0:0.1" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                            To="1.05"
                                            Duration="0:0:0.1" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MainImage"
                                            Storyboard.TargetProperty="(UIElement.Effect).(effects:BloomEffect.BloomIntensity)"
                                            To="0.4"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Button.Template>
        </Button>
    </DataTemplate>

    <DataTemplate x:Key="ControllerTemplate" DataType="{x:Type viewmodels:ControllerViewModel}">
        <Border
            Padding="15,12,12,12"
            Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
            CornerRadius="{DynamicResource ControlCornerRadius}"
            IsEnabled="{Binding IsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource InvertBooleanConverter}}">

            <ikw:SimpleStackPanel Spacing="12">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="5*" MinWidth="200" />
                        <ColumnDefinition Width="5*" MinWidth="200" />
                    </Grid.ColumnDefinitions>

                    <DockPanel>
                        <ui:FontIcon
                            VerticalAlignment="Center"
                            FontFamily="PromptFont"
                            FontSize="30"
                            Glyph="{Binding ControllerGlyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                        <ui:FontIcon Margin="6,0,0,0" VerticalAlignment="Center">
                            <ui:FontIcon.Style>
                                <Style TargetType="ui:FontIcon">
                                    <!--  Default Glyph if none of the conditions are true  -->
                                    <Setter Property="Glyph" Value="&#xECF0;" />

                                    <Style.Triggers>
                                        <!--  Trigger for IsInternal  -->
                                        <DataTrigger Binding="{Binding IsInternal}" Value="True">
                                            <Setter Property="Glyph" Value="&#xE990;" />
                                        </DataTrigger>

                                        <!--  Trigger for IsWireless  -->
                                        <DataTrigger Binding="{Binding IsWireless}" Value="True">
                                            <Setter Property="Glyph" Value="&#xE702;" />
                                        </DataTrigger>

                                        <!--  Trigger for IsDongle  -->
                                        <DataTrigger Binding="{Binding IsDongle}" Value="True">
                                            <Setter Property="Glyph" Value="&#xECF1;" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ui:FontIcon.Style>
                        </ui:FontIcon>

                        <ikw:SimpleStackPanel
                            Margin="12,0,0,0"
                            VerticalAlignment="Center"
                            Spacing="2">
                            <TextBlock Style="{StaticResource BodyTextBlockStyle}" Text="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                            <Grid>
                                <ikw:SimpleStackPanel
                                    HorizontalAlignment="Left"
                                    Orientation="Horizontal"
                                    Spacing="2">

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="0">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="1">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="2">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="3">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="4">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="5">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="6">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="7">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="8">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>

                                    <Border
                                        Width="12"
                                        Height="12"
                                        CornerRadius="2">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Setter Property="Background" Value="{DynamicResource SystemControlForegroundBaseLowBrush}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding UserIndex}" Value="9">
                                                        <Setter Property="Background" Value="{DynamicResource AccentAAFillColorDefaultBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                </ikw:SimpleStackPanel>
                            </Grid>
                        </ikw:SimpleStackPanel>
                    </DockPanel>

                    <ikw:SimpleStackPanel
                        Grid.Column="1"
                        Height="31"
                        HorizontalAlignment="Right"
                        Orientation="Horizontal"
                        Spacing="6"
                        Visibility="{Binding IsVirtual, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=False}">

                        <!--  Connect/Disconnect  -->
                        <Button
                            VerticalAlignment="Stretch"
                            Command="{Binding ConnectCommand}"
                            FontSize="14"
                            IsEnabled="{Binding IsPlugged, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource InvertBooleanConverter}}">
                            <Button.Style>
                                <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
                                    <Setter Property="Content" Value="{l:Static resx:Resources.Controller_Connect}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsPlugged, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Content" Value="{l:Static resx:Resources.Controller_Disconnect}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <!--  Hide/Unhide  -->
                        <Button
                            VerticalAlignment="Stretch"
                            Command="{Binding HideCommand}"
                            FontSize="14">
                            <Button.Style>
                                <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
                                    <Setter Property="Content" Value="{l:Static resx:Resources.Controller_Hide}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsHidden, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Content" Value="{l:Static resx:Resources.Controller_Unhide}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <!--  Calibrate  -->
                        <Button
                            VerticalAlignment="Stretch"
                            Command="{Binding CalibrateCommand}"
                            Content="{l:Static resx:Resources.Controller_Calibrate}"
                            FontSize="14"
                            Style="{DynamicResource DefaultButtonStyle}"
                            Visibility="{Binding CanCalibrate, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}" />

                        <!--  Switch layout (WIP)  -->
                        <Button
                            VerticalAlignment="Stretch"
                            Command="{Binding SwitchLayoutCommand}"
                            Style="{DynamicResource DefaultButtonStyle}"
                            Visibility="{Binding HasLayout, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">

                            <ui:FontIcon FontFamily="PromptFont" Glyph="{Binding LayoutGlyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                        </Button>
                    </ikw:SimpleStackPanel>
                </Grid>

                <ikw:SimpleStackPanel
                    Orientation="Vertical"
                    Spacing="6"
                    Visibility="{Binding IsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">

                    <TextBlock
                        Foreground="{DynamicResource AccentAAFillColorDefaultBrush}"
                        TextAlignment="Center"
                        TextWrapping="Wrap">
                        <TextBlock.Style>
                            <Style BasedOn="{StaticResource CaptionTextBlockStyle}" TargetType="TextBlock">
                                <!--  Default Text if none of the conditions are met  -->
                                <Setter Property="Text" Value="{x:Static resx:Resources.XInputController_Warning_USB}" />

                                <Style.Triggers>
                                    <!--  Trigger for USB  -->
                                    <DataTrigger Binding="{Binding Enumerator}" Value="USB">
                                        <Setter Property="Text" Value="{x:Static resx:Resources.XInputController_Warning_USB}" />
                                    </DataTrigger>

                                    <!--  Trigger for BTHENUM  -->
                                    <DataTrigger Binding="{Binding Enumerator}" Value="BTHENUM">
                                        <Setter Property="Text" Value="{x:Static resx:Resources.XInputController_Warning_BTH}" />
                                    </DataTrigger>

                                    <!--  Trigger for BTHLEDEVICE  -->
                                    <DataTrigger Binding="{Binding Enumerator}" Value="BTHLEDEVICE">
                                        <Setter Property="Text" Value="{x:Static resx:Resources.XInputController_Warning_BTH}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>

                    <ui:ProgressBar
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Bottom"
                        IsIndeterminate="True" />
                </ikw:SimpleStackPanel>
            </ikw:SimpleStackPanel>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="ButtonMappingTemplate" DataType="{x:Type viewmodels:ButtonMappingViewModel}">
        <Grid Margin="48,0,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Button
                Grid.Column="0"
                Margin="0,1,2,1"
                HorizontalAlignment="Center"
                VerticalAlignment="Stretch"
                Command="{Binding ButtonCommand}">
                <ui:FontIcon
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                    Glyph="&#xECC9;" />
            </Button>

            <ui:SettingsExpander Grid.Column="1">
                <ui:SettingsExpander.Content>
                    <DockPanel>
                        <ComboBox MinWidth="120" SelectedIndex="{Binding ActionTypeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Disabled}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Button}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Joystick}" IsEnabled="False" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Keyboard}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Mouse}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Trigger}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Shift}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Inherit}" IsEnabled="True" />
                        </ComboBox>

                        <ComboBox
                            MinWidth="180"
                            Margin="3,0,0,0"
                            DisplayMemberPath="Content"
                            ItemsSource="{Binding Targets, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedItem="{Binding SelectedTarget, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedValuePath="Content">
                            <ComboBox.Style>
                                <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
                                    <Setter Property="IsEnabled" Value="True" />
                                    <Style.Triggers>
                                        <!--  Disable when ActionTypeIndex is 0  -->
                                        <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <!--  Disable when ActionTypeIndex is 7  -->
                                        <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="7">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ComboBox.Style>
                        </ComboBox>
                    </DockPanel>
                </ui:SettingsExpander.Content>

                <ui:SettingsExpander.Items>
                    <!--  Keyboard/Mouse  -->
                    <!--  Modifiers  -->
                    <ui:SettingsCard Header="Modifier(s)" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=3|4}">
                        <ComboBox SelectedIndex="{Binding ModifierIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="None" />
                            <ComboBoxItem Content="Shift" />
                            <ComboBoxItem Content="Control" />
                            <ComboBoxItem Content="Alt" />
                            <ComboBoxItem Content="Shift + Control" />
                            <ComboBoxItem Content="Shift + Alt" />
                            <ComboBoxItem Content="Control + Alt" />
                            <ComboBoxItem Content="Shift + Control + Alt" />
                        </ComboBox>
                    </ui:SettingsCard>

                    <!--  Trigger  -->
                    <!--  Value  -->
                    <ui:SettingsCard Header="Trigger value" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=5}">
                        <DockPanel Grid.Column="1" Margin="12,0,0,0">
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding TriggerOutput, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0}}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="255"
                                Minimum="10"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding TriggerOutput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Turbo  -->
                    <ui:SettingsCard Header="{x:Static resx:Resources.LayoutPage_HoldToRepeat}" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|3|4|5|6}">
                        <ui:ToggleSwitch
                            HorizontalAlignment="Right"
                            IsOn="{Binding Turbo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Style="{DynamicResource InvertedToggleSwitchStyle}" />
                    </ui:SettingsCard>
                    <ui:SettingsCard
                        Header="Repeat rate"
                        IsEnabled="{Binding Turbo, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        Visibility="{Binding Turbo, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding TurboDelay, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} ms}" />

                            <Slider
                                Margin="3,0,0,0"
                                VerticalAlignment="Center"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="100"
                                Minimum="10"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding TurboDelay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Interruptable  -->
                    <ui:SettingsCard Header="{x:Static resx:Resources.LayoutPage_Interruptable}" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|3|4|5|6}">
                        <ui:ToggleSwitch IsOn="{Binding Interruptable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource InvertedToggleSwitchStyle}" />
                    </ui:SettingsCard>

                    <!--  Toggle  -->
                    <ui:SettingsCard Header="{x:Static resx:Resources.LayoutPage_PressToToggle}" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|3|4|5|6}">
                        <ui:ToggleSwitch IsOn="{Binding Toggle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource InvertedToggleSwitchStyle}" />
                    </ui:SettingsCard>

                    <!--  Haptic  -->
                    <ui:SettingsCard Header="{x:Static resx:Resources.LayoutPage_HapticFeedback}" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|3|4|5|6}">
                        <DockPanel>
                            <ComboBox Width="105" SelectedIndex="{Binding HapticModeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                <ComboBoxItem Content="Off" />
                                <ComboBoxItem Content="Down" />
                                <ComboBoxItem Content="Up" />
                                <ComboBoxItem Content="Both" />
                            </ComboBox>
                            <ComboBox
                                Width="105"
                                Margin="3,0,0,0"
                                SelectedIndex="{Binding HapticStrengthIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                <ComboBoxItem Content="Low" />
                                <ComboBoxItem Content="Medium" />
                                <ComboBoxItem Content="High" />
                                <ComboBox.Style>
                                    <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
                                        <Setter Property="IsEnabled" Value="True" />
                                        <Style.Triggers>
                                            <!--  Disable when ActionTypeIndex is 0  -->
                                            <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                                <Setter Property="IsEnabled" Value="False" />
                                            </DataTrigger>
                                            <!--  Disable when ActionTypeIndex is 7  -->
                                            <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="7">
                                                <Setter Property="IsEnabled" Value="False" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ComboBox.Style>
                            </ComboBox>
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Input Type and Shifting  -->
                    <ui:SettingsCard
                        Description="{x:Static resx:Resources.LayoutPage_InputShiftDesc}"
                        Header="{x:Static resx:Resources.LayoutPage_InputShift}"
                        Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|2|3|4|5|6|7|8|9|10}">
                        <ComboBox SelectedIndex="{Binding ShiftIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="Disabled on shift" />
                            <ComboBoxItem Content="Enabled with shift A" />
                            <ComboBoxItem Content="Enabled with shift B" />
                            <ComboBoxItem Content="Enabled with shift C" />
                            <ComboBoxItem Content="Enabled with shift D" />
                            <ComboBoxItem Content="Always enabled" />
                        </ComboBox>
                    </ui:SettingsCard>

                    <!--  Action type  -->
                    <ui:SettingsCard
                        Description="{Binding PressTypeTooltip, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        Header="{x:Static resx:Resources.LayoutPage_PressType}"
                        Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|2|3|4|5|6|7|8|9|10}">
                        <ComboBox SelectedIndex="{Binding PressTypeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="Single press" ToolTip="{x:Static resx:Resources.LayoutPage_PressTypeTooltip0}" />
                            <ComboBoxItem Content="Long press" ToolTip="{x:Static resx:Resources.LayoutPage_PressTypeTooltip1}" />
                            <ComboBoxItem Content="Timed hold" ToolTip="{x:Static resx:Resources.LayoutPage_PressTypeTooltip2}" />
                            <ComboBoxItem Content="Double press" ToolTip="{x:Static resx:Resources.LayoutPage_PressTypeTooltip3}" />
                        </ComboBox>
                    </ui:SettingsCard>

                    <!--  Long press  -->
                    <!--  Press duration  -->
                    <ui:SettingsCard
                        Header="Press duration"
                        IsEnabled="{Binding HasDuration, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        Visibility="{Binding HasDuration, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding LongPressDelay, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} ms}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="2000"
                                Minimum="100"
                                TickFrequency="10"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding LongPressDelay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>
                </ui:SettingsExpander.Items>
            </ui:SettingsExpander>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="GyroMappingTemplate" DataType="{x:Type viewmodels:GyroMappingViewModel}">
        <ui:SettingsExpander>
            <ui:SettingsExpander.Content>
                <DockPanel>
                    <ComboBox Width="120" SelectedIndex="{Binding ActionTypeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Disabled}" IsEnabled="True" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Button}" IsEnabled="False" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Joystick}" IsEnabled="True" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Keyboard}" IsEnabled="False" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Mouse}" IsEnabled="True" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Trigger}" IsEnabled="False" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Shift}" IsEnabled="False" />
                        <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Inherit}" IsEnabled="False" />
                    </ComboBox>

                    <ComboBox
                        Width="180"
                        Margin="3,0,0,0"
                        DisplayMemberPath="Content"
                        ItemsSource="{Binding Targets, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding SelectedTarget, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedValuePath="Content">
                        <ComboBox.Style>
                            <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
                                <Setter Property="IsEnabled" Value="True" />
                                <Style.Triggers>
                                    <!--  Disable when ActionTypeIndex is 0  -->
                                    <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                    <!--  Disable when ActionTypeIndex is 7  -->
                                    <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="7">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                </DockPanel>
            </ui:SettingsExpander.Content>

            <ui:SettingsExpander.Items>
                <ui:SettingsCard Header="{l:Static resx:Resources.ProfilesPage_StyleofInput}">
                    <ComboBox ItemsSource="{Binding MotionInputItems}" SelectedIndex="{Binding MotionInputIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewmodels:MotionInputViewModel}">
                                <ikw:SimpleStackPanel
                                    VerticalAlignment="Center"
                                    Orientation="Horizontal"
                                    Spacing="3">
                                    <ui:FontIcon Glyph="{Binding Glyph}" Visibility="{Binding HasGlyph, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    <TextBlock Text="{Binding Description}" />
                                </ikw:SimpleStackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </ui:SettingsCard>

                <ui:SettingsCard Description="{l:Static resx:Resources.ProfilesPage_UMCMotionOnOffDesc}" Header="{l:Static resx:Resources.ProfilesPage_UMCMotionOnOff}">
                    <ikw:SimpleStackPanel Orientation="Vertical" Spacing="3">
                        <ComboBox SelectedIndex="{Binding MotionModeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="{l:Static resx:Resources.ProfilesPage_UMCMotionOff}" />
                            <ComboBoxItem Content="{l:Static resx:Resources.ProfilesPage_UMCMotionOn}" />
                            <ComboBoxItem Content="{l:Static resx:Resources.ProfilesPage_UMCMotionToggle}" />
                        </ComboBox>

                        <!--  Motion activator  -->
                        <ItemsControl ItemsSource="{Binding HotkeysList}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="10*" />
                                            <ColumnDefinition Width="45" />
                                        </Grid.ColumnDefinitions>

                                        <ToggleButton
                                            Height="41"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Command="{Binding DefineButtonCommand}"
                                            IsChecked="{Binding IsListening, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">

                                            <ToggleButton.Resources>
                                                <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="ToggleButton">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsExecuted}" Value="True">
                                                            <DataTrigger.EnterActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation
                                                                            AutoReverse="True"
                                                                            RepeatBehavior="1x"
                                                                            Storyboard.TargetProperty="Opacity"
                                                                            From="1.0"
                                                                            To="0.0"
                                                                            Duration="0:0:0.125" />
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </DataTrigger.EnterActions>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ToggleButton.Resources>

                                            <ikw:SimpleStackPanel Orientation="Horizontal" Spacing="3">
                                                <ItemsControl ItemsSource="{Binding ButtonGlyphs}">
                                                    <ItemsControl.Style>
                                                        <Style TargetType="ItemsControl">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding ButtonGlyphs.Count}" Value="0">
                                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ButtonGlyphs.Count}">
                                                                    <Setter Property="Visibility" Value="Visible" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ItemsControl.Style>

                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <ikw:SimpleStackPanel Orientation="Horizontal" Spacing="3" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>

                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <ui:FontIcon
                                                                FontFamily="PromptFont"
                                                                FontSize="24"
                                                                Glyph="{Binding Glyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                                                <ui:FontIcon.Style>
                                                                    <Style TargetType="ui:FontIcon">
                                                                        <Style.Triggers>
                                                                            <DataTrigger Binding="{Binding Foreground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                                                                <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseMediumBrush}" />
                                                                            </DataTrigger>
                                                                        </Style.Triggers>
                                                                        <Setter Property="Foreground" Value="{Binding Foreground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                                                    </Style>
                                                                </ui:FontIcon.Style>
                                                            </ui:FontIcon>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>

                                                <TextBlock VerticalAlignment="Center" Text="{Binding KeyboardChord, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding KeyboardChord}" Value="">
                                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding KeyboardChord}">
                                                                    <Setter Property="Visibility" Value="Visible" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>

                                                <TextBlock
                                                    VerticalAlignment="Center"
                                                    Foreground="{DynamicResource NavigationViewSelectionIndicatorForeground}"
                                                    Style="{StaticResource CaptionTextBlockStyle}"
                                                    Text="{Binding InputsChordType, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </ikw:SimpleStackPanel>
                                        </ToggleButton>

                                        <Button
                                            Grid.Column="1"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Stretch"
                                            Command="{Binding EraseButtonCommand}">
                                            <ui:FontIcon
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                FontFamily="{DynamicResource SymbolThemeFontFamily}"
                                                Glyph="&#xe75c;" />
                                        </Button>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ikw:SimpleStackPanel>
                </ui:SettingsCard>

                <!--  Joystick  -->
                <!--  Gyrometer weight  -->
                <ui:SettingsCard
                    Description="Modify the gyrometer weight when applied against joystick movements"
                    Header="Gyrometer weight"
                    Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                    <DockPanel>
                        <TextBox Text="{Binding GyroWeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat=N1}" TextAlignment="Center" />
                        <Slider
                            Margin="3,0,0,0"
                            AutoToolTipPrecision="1"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="2.0"
                            Minimum="1.0"
                            TickFrequency="0.1"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding GyroWeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Joystick  -->
                <!--  Output shape  -->
                <ui:SettingsCard Header="Output shape" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                    <ComboBox SelectedIndex="{Binding Axis2AxisOutputShapeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <ComboBoxItem>Default</ComboBoxItem>
                        <ComboBoxItem>Circle</ComboBoxItem>
                        <ComboBoxItem>Cross</ComboBoxItem>
                        <ComboBoxItem>Square</ComboBoxItem>
                    </ComboBox>
                </ui:SettingsCard>

                <!--  Joystick  -->
                <!--  Inner deadzone  -->
                <ui:SettingsCard Header="Inner deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                    <DockPanel>
                        <TextBox
                            HorizontalContentAlignment="Center"
                            IsReadOnly="True"
                            Text="{Binding Axis2AxisInnerDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                        <Slider
                            Margin="6,0,0,0"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="25"
                            Minimum="0"
                            TickFrequency="1"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding Axis2AxisInnerDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Joystick  -->
                <!--  Outer deadzone  -->
                <ui:SettingsCard Header="Outer deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                    <DockPanel>
                        <TextBox
                            HorizontalContentAlignment="Center"
                            IsReadOnly="True"
                            Text="{Binding Axis2AxisOuterDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                        <Slider
                            Margin="3,0,0,0"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="25"
                            Minimum="0"
                            TickFrequency="5"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding Axis2AxisOuterDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Joystick  -->
                <!--  Anti deadzone  -->
                <ui:SettingsCard Header="Anti deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                    <DockPanel>
                        <TextBox
                            HorizontalContentAlignment="Center"
                            IsReadOnly="True"
                            Text="{Binding Axis2AxisAntiDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                        <Slider
                            Margin="3,0,0,0"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="25"
                            Minimum="0"
                            TickFrequency="5"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding Axis2AxisAntiDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Mouse  -->
                <!--  Pointer Speed  -->
                <ui:SettingsCard Header="Sensitivity" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=4}">
                    <DockPanel>
                        <TextBox
                            HorizontalContentAlignment="Center"
                            IsReadOnly="True"
                            Text="{Binding Axis2MousePointerSpeed, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                        <Slider
                            Margin="3,0,0,0"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="100"
                            Minimum="5"
                            TickFrequency="1"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding Axis2MousePointerSpeed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Mouse  -->
                <!--  Acceleration  -->
                <ui:SettingsCard Header="Acceleration" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=4}">
                    <DockPanel>
                        <TextBox
                            HorizontalContentAlignment="Center"
                            IsReadOnly="True"
                            Text="{Binding Axis2MouseAcceleration, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                        <Slider
                            Margin="3,0,0,0"
                            AutoToolTipPrecision="2"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="2.00"
                            Minimum="1.00"
                            TickFrequency="0.05"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding Axis2MouseAcceleration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>

                <!--  Mouse  -->
                <!--  Deadzone  -->
                <ui:SettingsCard Header="Deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=4}">
                    <DockPanel>
                        <TextBox
                            HorizontalContentAlignment="Center"
                            IsReadOnly="True"
                            Text="{Binding Axis2MouseDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                        <Slider
                            Margin="3,0,0,0"
                            IsMoveToPointEnabled="True"
                            IsSnapToTickEnabled="True"
                            Maximum="100"
                            Minimum="0"
                            TickFrequency="1"
                            TickPlacement="BottomRight"
                            ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                            Value="{Binding Axis2MouseDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </DockPanel>
                </ui:SettingsCard>
            </ui:SettingsExpander.Items>
        </ui:SettingsExpander>
    </DataTemplate>

    <DataTemplate x:Key="AxisMappingTemplate" DataType="{x:Type viewmodels:AxisMappingViewModel}">
        <Grid Margin="48,0,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Button
                Margin="0,1,2,1"
                HorizontalAlignment="Center"
                VerticalAlignment="Stretch"
                Command="{Binding ButtonCommand}">
                <ui:FontIcon
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                    Glyph="&#xECC9;" />
            </Button>

            <ui:SettingsExpander Grid.Column="1">
                <ui:SettingsExpander.Content>
                    <DockPanel>
                        <ComboBox MinWidth="120" SelectedIndex="{Binding ActionTypeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Disabled}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Button}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Joystick}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Keyboard}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Mouse}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Trigger}" IsEnabled="False" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Shift}" IsEnabled="False" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Inherit}" IsEnabled="True" />
                        </ComboBox>

                        <ComboBox
                            MinWidth="180"
                            Margin="3,0,0,0"
                            VerticalAlignment="Center"
                            DisplayMemberPath="Content"
                            ItemsSource="{Binding Targets, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedItem="{Binding SelectedTarget, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedValuePath="Content">
                            <ComboBox.Style>
                                <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
                                    <Setter Property="IsEnabled" Value="True" />
                                    <Style.Triggers>
                                        <!--  Disable when ActionTypeIndex is 0  -->
                                        <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <!--  Disable when ActionTypeIndex is 7  -->
                                        <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="7">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ComboBox.Style>
                        </ComboBox>
                    </DockPanel>
                </ui:SettingsExpander.Content>

                <ui:SettingsExpander.Items>
                    <!--  Axis Direction  -->
                    <!--  TODO: Translate me  -->
                    <ui:SettingsCard Header="Axis direction" Visibility="{Binding Axis2ButtonVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <StackPanel>
                            <WrapPanel Orientation="Horizontal">
                                <CheckBox Content="Up" IsChecked="{Binding IsUp, Mode=TwoWay}" />
                                <CheckBox Content="Down" IsChecked="{Binding IsDown, Mode=TwoWay}" />
                            </WrapPanel>
                            <WrapPanel Orientation="Horizontal">
                                <CheckBox Content="Left" IsChecked="{Binding IsLeft, Mode=TwoWay}" />
                                <CheckBox Content="Right" IsChecked="{Binding IsRight, Mode=TwoWay}" />
                            </WrapPanel>
                        </StackPanel>
                    </ui:SettingsCard>

                    <!--  Axis Threshold  -->
                    <!--  TODO: Translate me  -->
                    <ui:SettingsCard Header="Axis threshold" Visibility="{Binding Axis2ButtonVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2ButtonThreshold, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat=N0}" />

                            <Slider
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                LargeChange="100"
                                Maximum="250"
                                Minimum="10"
                                SmallChange="10"
                                TickFrequency="10"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2ButtonThreshold, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Output shape  -->
                    <!--  TODO: Translate me  -->
                    <ui:SettingsCard Header="Output shape" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                        <ComboBox SelectedIndex="{Binding Axis2AxisOutputShapeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem>Default</ComboBoxItem>
                            <ComboBoxItem>Circle</ComboBoxItem>
                            <ComboBoxItem>Cross</ComboBoxItem>
                            <ComboBoxItem>Square</ComboBoxItem>
                        </ComboBox>
                    </ui:SettingsCard>

                    <!--  Invert horizontal  -->
                    <!--  TODO: Translate me  -->
                    <ui:SettingsCard Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                        <CheckBox Content="Invert horizontal axis" IsChecked="{Binding Axis2AxisInvertHorizontal, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </ui:SettingsCard>

                    <!--  Invert vertical  -->
                    <!--  TODO: Translate me  -->
                    <ui:SettingsCard Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                        <CheckBox Content="Invert vertical axis" IsChecked="{Binding Axis2AxisInvertVertical, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </ui:SettingsCard>

                    <!--  Inner deadzone  -->
                    <ui:SettingsCard Header="Inner deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2AxisInnerDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="6,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="25"
                                Minimum="0"
                                TickFrequency="1"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2AxisInnerDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Outer deadzone  -->
                    <ui:SettingsCard Header="Outer deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2AxisOuterDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="25"
                                Minimum="0"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2AxisOuterDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Anti deadzone  -->
                    <ui:SettingsCard Header="Anti deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=2}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2AxisAntiDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="25"
                                Minimum="0"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2AxisAntiDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Mouse Axis  -->
                    <!--  Sensitivity  -->
                    <ui:SettingsCard Header="Sensitivity" Visibility="{Binding Axis2MouseVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2MousePointerSpeed, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="100"
                                Minimum="5"
                                TickFrequency="10"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat={}{0:N0} %, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2MousePointerSpeed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Mouse Axis  -->
                    <!--  Acceleration  -->
                    <ui:SettingsCard Header="Acceleration" Visibility="{Binding Axis2MouseVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2MouseAcceleration, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N2} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                AutoToolTipPrecision="2"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="2.00"
                                Minimum="1.00"
                                TickFrequency="0.05"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat={}{0:N2} %, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2MouseAcceleration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Mouse Axis  -->
                    <!--  Touchpad: Filtering  -->
                    <ui:SettingsCard
                        d:Visibility="Visible"
                        Header="Filtering"
                        Visibility="{Binding Axis2TouchpadVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <ui:ToggleSwitch IsOn="{Binding Axis2MouseFiltering, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource InvertedToggleSwitchStyle}" />
                    </ui:SettingsCard>

                    <!--  Mouse Axis  -->
                    <!--  Touchpad: Filtering cutoff  -->
                    <ui:SettingsCard
                        d:Visibility="Visible"
                        Header="Filtering cutoff (less is more filter)"
                        Visibility="{Binding Axis2MouseFiltering, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2MouseFilterCutoff, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat=N3}" />

                            <Slider
                                Margin="3,0,0,0"
                                AutoToolTipPrecision="3"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="0.1"
                                Minimum="0.01"
                                TickFrequency="0.005"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2MouseFilterCutoff, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Mouse Axis  -->
                    <!--  Deadzone  -->
                    <ui:SettingsCard Header="Deadzone" Visibility="{Binding Axis2JoystickVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2MouseDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="100"
                                Minimum="0"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat={}{0:N0} %, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2MouseDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Input Type and Shifting  -->
                    <ui:SettingsCard
                        Description="{x:Static resx:Resources.LayoutPage_InputShiftDesc}"
                        Header="{x:Static resx:Resources.LayoutPage_InputShift}"
                        Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|2|3|4|5|6|7|8|9|10}">
                        <ComboBox SelectedIndex="{Binding ShiftIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="Disabled on shift" />
                            <ComboBoxItem Content="Enabled with shift A" />
                            <ComboBoxItem Content="Enabled with shift B" />
                            <ComboBoxItem Content="Enabled with shift C" />
                            <ComboBoxItem Content="Enabled with shift D" />
                            <ComboBoxItem Content="Always enabled" />
                        </ComboBox>
                    </ui:SettingsCard>
                </ui:SettingsExpander.Items>
            </ui:SettingsExpander>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TriggerMappingTemplate" DataType="{x:Type viewmodels:TriggerMappingViewModel}">
        <Grid Margin="48,0,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Button
                Margin="0,1,2,1"
                VerticalAlignment="Stretch"
                Command="{Binding ButtonCommand}">
                <ui:FontIcon
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                    Glyph="&#xECC9;" />
            </Button>

            <ui:SettingsExpander Grid.Column="1">
                <ui:SettingsExpander.Content>
                    <DockPanel>
                        <ComboBox MinWidth="120" SelectedIndex="{Binding ActionTypeIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Disabled}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Button}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Joystick}" IsEnabled="False" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Keyboard}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Mouse}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Trigger}" IsEnabled="True" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Shift}" IsEnabled="False" />
                            <ComboBoxItem Content="{x:Static resx:Resources.LayoutPage_ActionType_Inherit}" IsEnabled="True" />
                        </ComboBox>

                        <ComboBox
                            Width="180"
                            Margin="3,0,0,0"
                            DisplayMemberPath="Content"
                            ItemsSource="{Binding Targets, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedItem="{Binding SelectedTarget, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            SelectedValuePath="Content">
                            <ComboBox.Style>
                                <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
                                    <Setter Property="IsEnabled" Value="True" />
                                    <Style.Triggers>
                                        <!--  Disable when ActionTypeIndex is 0  -->
                                        <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                        <!--  Disable when ActionTypeIndex is 7  -->
                                        <DataTrigger Binding="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="7">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ComboBox.Style>
                        </ComboBox>
                    </DockPanel>
                </ui:SettingsExpander.Content>

                <ui:SettingsExpander.Items>
                    <!--  Axis Threshold  -->
                    <!--  TODO: Translate me  -->
                    <ui:SettingsCard Header="Axis threshold" Visibility="{Binding Axis2ButtonVisibility, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Axis2ButtonThreshold, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat=N0}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                LargeChange="100"
                                Maximum="250"
                                Minimum="10"
                                SmallChange="10"
                                TickFrequency="10"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Axis2ButtonThreshold, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Inner deadzone  -->
                    <ui:SettingsCard Header="Inner deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=5}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Trigger2TriggerInnerDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="6,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="25"
                                Minimum="0"
                                TickFrequency="1"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Trigger2TriggerInnerDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Outer deadzone  -->
                    <ui:SettingsCard Header="Outer deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=5}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Trigger2TriggerOuterDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="25"
                                Minimum="0"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Trigger2TriggerOuterDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Anti deadzone  -->
                    <ui:SettingsCard Header="Anti deadzone" Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=5}">
                        <DockPanel>
                            <TextBox
                                HorizontalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Trigger2TriggerAntiDeadzone, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0} %}" />

                            <Slider
                                Margin="3,0,0,0"
                                IsMoveToPointEnabled="True"
                                IsSnapToTickEnabled="True"
                                Maximum="25"
                                Minimum="0"
                                TickFrequency="5"
                                TickPlacement="BottomRight"
                                ToolTip="{Binding Value, StringFormat=N0, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                Value="{Binding Trigger2TriggerAntiDeadzone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </ui:SettingsCard>

                    <!--  Input Type and Shifting  -->
                    <ui:SettingsCard
                        Description="{x:Static resx:Resources.LayoutPage_InputShiftDesc}"
                        Header="{x:Static resx:Resources.LayoutPage_InputShift}"
                        Visibility="{Binding ActionTypeIndex, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IndexToVisibilityConverter}, ConverterParameter=1|2|3|4|5|6|7|8|9|10}">
                        <ComboBox SelectedIndex="{Binding ShiftIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBoxItem Content="Disabled on shift" />
                            <ComboBoxItem Content="Enabled with shift A" />
                            <ComboBoxItem Content="Enabled with shift B" />
                            <ComboBoxItem Content="Enabled with shift C" />
                            <ComboBoxItem Content="Enabled with shift D" />
                            <ComboBoxItem Content="Always enabled" />
                        </ComboBox>
                    </ui:SettingsCard>
                </ui:SettingsExpander.Items>
            </ui:SettingsExpander>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="ButtonStackTemplate" DataType="{x:Type viewmodels:ButtonStackViewModel}">
        <StackPanel Visibility="{Binding IsSupported, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">
            <DockPanel>
                <Button
                    Grid.Column="0"
                    Width="44"
                    Height="44"
                    Margin="0,2,2,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    Command="{Binding ButtonCommand}"
                    Style="{DynamicResource AccentButtonStyle}">
                    <ui:FontIcon
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        FontFamily="{DynamicResource SymbolThemeFontFamily}"
                        Glyph="&#xECC8;" />
                </Button>

                <ui:FontIcon
                    Width="40"
                    Height="40"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Glyph="{Binding Glyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ui:FontIcon.Style>
                        <Style TargetType="{x:Type ui:FontIcon}">
                            <Setter Property="Foreground" Value="{DynamicResource WindowTextBrush}" />
                            <Setter Property="FontFamily" Value="{DynamicResource PhoneFontFamilyNormal}" />
                            <Setter Property="FontSize" Value="14" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="Foreground" Value="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontFamily" Value="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontSize" Value="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ui:FontIcon.Style>
                </ui:FontIcon>

                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="14">
                    <TextBlock.Text>
                        <MultiBinding Converter="{StaticResource ResourceFormatConverter}" ConverterParameter="LayoutPage_ExecuteActionsNumFormat">
                            <Binding
                                FallbackValue="No Name"
                                Mode="OneWay"
                                Path="Name"
                                TargetNullValue="Unknown"
                                UpdateSourceTrigger="PropertyChanged" />
                            <Binding
                                FallbackValue="0"
                                Mode="OneWay"
                                Path="ActionNumber"
                                TargetNullValue="0"
                                UpdateSourceTrigger="PropertyChanged" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </DockPanel>

            <ItemsControl ItemTemplate="{StaticResource ButtonMappingTemplate}" ItemsSource="{Binding ButtonMappings, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="GyroStackTemplate" DataType="{x:Type viewmodels:GyroStackViewModel}">
        <StackPanel Visibility="{Binding IsSupported, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">
            <DockPanel>
                <ui:FontIcon
                    Width="40"
                    Height="40"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Glyph="{Binding Glyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ui:FontIcon.Style>
                        <Style TargetType="{x:Type ui:FontIcon}">
                            <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseMediumBrush}" />
                            <Setter Property="FontFamily" Value="{DynamicResource PhoneFontFamilyNormal}" />
                            <Setter Property="FontSize" Value="14" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="Foreground" Value="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontFamily" Value="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontSize" Value="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ui:FontIcon.Style>
                </ui:FontIcon>

                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Text="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
            </DockPanel>

            <ItemsControl ItemTemplate="{StaticResource GyroMappingTemplate}" ItemsSource="{Binding GyroMappings, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="AxisStackTemplate" DataType="{x:Type viewmodels:AxisStackViewModel}">
        <StackPanel Visibility="{Binding IsSupported, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">
            <DockPanel>
                <Button
                    Grid.Column="0"
                    Width="44"
                    Height="44"
                    Margin="0,2,2,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    Command="{Binding ButtonCommand}"
                    Style="{DynamicResource AccentButtonStyle}">
                    <ui:FontIcon
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        FontFamily="{DynamicResource SymbolThemeFontFamily}"
                        Glyph="&#xECC8;" />
                </Button>

                <ui:FontIcon
                    Width="40"
                    Height="40"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Glyph="{Binding Glyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ui:FontIcon.Style>
                        <Style TargetType="{x:Type ui:FontIcon}">
                            <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseMediumBrush}" />
                            <Setter Property="FontFamily" Value="{DynamicResource PhoneFontFamilyNormal}" />
                            <Setter Property="FontSize" Value="14" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="Foreground" Value="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontFamily" Value="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontSize" Value="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ui:FontIcon.Style>
                </ui:FontIcon>

                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="14">
                    <TextBlock.Text>
                        <MultiBinding Converter="{StaticResource ResourceFormatConverter}" ConverterParameter="LayoutPage_ExecuteActionsNumFormat">
                            <Binding
                                FallbackValue="No Name"
                                Mode="OneWay"
                                Path="Name"
                                TargetNullValue="Unknown"
                                UpdateSourceTrigger="PropertyChanged" />
                            <Binding
                                FallbackValue="0"
                                Mode="OneWay"
                                Path="ActionNumber"
                                TargetNullValue="0"
                                UpdateSourceTrigger="PropertyChanged" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </DockPanel>

            <ItemsControl ItemTemplate="{StaticResource AxisMappingTemplate}" ItemsSource="{Binding AxisMappings, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="TriggerStackTemplate" DataType="{x:Type viewmodels:TriggerStackViewModel}">
        <StackPanel Visibility="{Binding IsSupported, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}">
            <DockPanel>
                <Button
                    Grid.Column="0"
                    Width="44"
                    Height="44"
                    Margin="0,2,2,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    Command="{Binding ButtonCommand}"
                    Style="{DynamicResource AccentButtonStyle}">
                    <ui:FontIcon
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        FontFamily="{DynamicResource SymbolThemeFontFamily}"
                        Glyph="&#xECC8;" />
                </Button>

                <ui:FontIcon
                    Width="40"
                    Height="40"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Glyph="{Binding Glyph, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ui:FontIcon.Style>
                        <Style TargetType="{x:Type ui:FontIcon}">
                            <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseMediumBrush}" />
                            <Setter Property="FontFamily" Value="{DynamicResource PhoneFontFamilyNormal}" />
                            <Setter Property="FontSize" Value="14" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="Foreground" Value="{Binding GlyphForeground, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontFamily" Value="{Binding GlyphFontFamily, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource IsNullConverter}}" Value="False">
                                    <Setter Property="FontSize" Value="{Binding GlyphFontSize, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ui:FontIcon.Style>
                </ui:FontIcon>

                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="14">
                    <TextBlock.Text>
                        <MultiBinding Converter="{StaticResource ResourceFormatConverter}" ConverterParameter="LayoutPage_ExecuteActionsNumFormat">
                            <Binding
                                FallbackValue="No Name"
                                Mode="OneWay"
                                Path="Name"
                                TargetNullValue="Unknown"
                                UpdateSourceTrigger="PropertyChanged" />
                            <Binding
                                FallbackValue="0"
                                Mode="OneWay"
                                Path="ActionNumber"
                                TargetNullValue="0"
                                UpdateSourceTrigger="PropertyChanged" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </DockPanel>

            <ItemsControl ItemTemplate="{StaticResource TriggerMappingTemplate}" ItemsSource="{Binding TriggerMappings, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>
    </DataTemplate>
</ResourceDictionary>